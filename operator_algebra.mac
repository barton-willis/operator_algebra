/* Maxima code for working with operators, especially quantum mechanical operators.

   Barton Willis
   Professor of Mathematics
   University of Nebraska at Kearney

Copyright (c) Barton Willis, 2021, 2022, 2024
GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/

/* There is no advantage to translating this code. But should a user translate this 
file, the following eliminates some warnings from the translator. */
eval_when(translate,
          declare_translated(operator_formula,dot_form,operator_apply,operator_simp,
                             operator_express,operator_adjoint))$
load("simplifying");

/* Tell Maxima that 'operator' is a feature.*/
declare(operator, feature);

/* Utilities */

/* Return true iff the input is a declared operator or if the input has the form
   U[a,b,...], where U has been declared an operator. */

operatorp(e) := (mapatom(e) and featurep(e,'operator)) or (subvarp(e) and featurep(inpart(e,0) ,'operator));

/* Predicates for detecting expressions whose operator is +,*,.,and ^^. 
   The function inpart looks at the internal form of an expression, so these
   predicates work the same regardless of the setting of inflag.*/

plusp(e) := (not mapatom(e)) and inpart(e,0) = "+";
timesp(e) := (not mapatom(e)) and inpart(e,0) = "*";
exptp(e) := (not mapatom(e)) and inpart(e,0) = "^";
nctimesp(e) := (not mapatom(e)) and inpart(e,0) = ".";
ncexptp(e) := (not mapatom(e)) and inpart(e,0) = "^^";
operator_adjointp(e) := (not mapatom(e)) and inpart(e,0) = 'operator_adjoint;

/* Return the formula (a lambda form) for an operator fn. If no formula
   has been declared or if fn isn't an operator, return false. */
get_operator_formula(fn) :=
  if symbolp(fn) and operatorp(fn) then (
    get(fn, 'formula))
  else false;

/* Convert an expression e from a functional form to a "dot" form; for example,
   if F & G are operators, then
   dot_form(F(G(x)) --> F . G . x and dot_form(107*F(G(x)) --> 107*F^^2 . x */

dot_form(e) := block([inflag : true],
  if plusp(e) or listp(e) then map('dot_form, e)
  elseif timesp(e) and constantp(first(e)) then first(e)*dot_form(rest(e))
  elseif not mapatom(e) and operatorp(inpart(e,0)) then inpart(e,0). dot_form(first(e))
  else e);

operator_apply_error(op, arg) :=
   if mapatom(arg) and get(arg,'internal) then (
      error("I don't know how to apply ", e))
   else (
       error("I don't know how to apply ", e," to ", arg));
       
/* Convert from "dot" form to a functional form; for example, if Jx & Jy are
   operators, operator_apply(Jx.Jy, ψ) --> Jx(Jy(ψ)).*/ 
operator_apply(e,ψ) := block([opsubst : true,n, inflag : true,ee],

  if listp(e) then (
    map(lambda([s], operator_apply(s,ψ)),e))

   elseif subvarp(e) and not mapatom(e) and operatorp(inpart(e,0)) then (
      funmake(e,[ψ]))

  elseif constantp(e) then (
    e*ψ)

  elseif operatorp(e) then (
    funmake(e,[ψ]))

  elseif plusp(e) then (
     map(lambda([q], operator_apply(q,ψ)), e))

  /* constant * operator is OK, otherwise, error. */
  elseif timesp(e) then (
    if constantp(first(e)) then (
      operator_apply(first(e), operator_apply(rest(e),ψ)))
    else (   
      operator_apply_error(e,ψ)))
    

  elseif ncexptp(e) and plusp(first(e)) then (
     [e,n] : args(e),
     if integerp(n) and n > 0 then (
        if evenp(n) then (
           ee : operator_simp(e^^(n/2)),
           ee : operator_apply(ee, operator_apply(ee, ψ)))
        else (
            ee : operator_simp(e^^((n+1)/2)),
            operator_apply(operator_simp(e^^((n-1)/2)),operator_apply(ee, ψ))))
      else operator_apply_error(e^^n,ψ))
    
  elseif ncexptp(e) then (
    [e,n] : args(e),
    if integerp(n) and n > 0 then (
      operator_apply(e, operator_apply(e^^(n-1), ψ)))
    else ((e^^n)(ψ)))

  elseif nctimesp(e) then (
      operator_apply(first(e), operator_apply(rest(e), ψ)))

  /* Catches, for example, F^n, F/G, ... */
  else operator_apply_error(e,ψ)); 

/* For an expression in dot form, apply the formulae for the operators to evaluate
   the expression e. Example

   (%i3)	ham : p.p/2 +  q^^2/2$
   (%i4)	operator_apply(ham ,exp(- x^2/(2*ħ)))$
   (%i5)	operator_express(%),factor;
   (%o5)	(ħ*%e^(-x^2/(2*ħ)))/2
*/
operator_express(e) := block([opsubst : true,fn],
   if mapatom(e) then e
   else (
      fn : get_operator_formula(inpart(e,0)),
      if fn # false then (
         apply(fn,[operator_express(first(e))]))
    else 
      map('operator_express, e)));

simp_op_adjoint(e) := block([estar],
   /* e is an operator--look to see if it has a declared operator adjoint */
  if operatorp(e) then (
      estar : get(e,'operator_adjoint),
      if estar = false then simpfuncall('operator_adjoint,e) else estar)
   /* operator_adjoint(maptom) = conjugate(mapatom)*/
   elseif mapatom(e) or constantp(e) then (
      conjugate(e))
   /* for a matrix, map operator_adjoint onto the matrix & transpose */
   elseif matrixp(e) then (
       block(matrix_element_transpose : 'operator_adjoint, transpose(e)))
   /* operator_adjoint is an involution */
   elseif operator_adjointp(e) then (
        first(e))
    /* operator_adjointp is additive and multiplicative */
   elseif plusp(e) or timesp(e) then (
        map('operator_adjoint, e))
    /* operator_adjointp(a.b) = operator_adjointp(b).operator_adjointp(a) */
    elseif nctimesp(e) then (
        apply(".", map('operator_adjoint, reverse(args(e)))))
    /* operator_adjointp(a^b) = operator_adjointp(a)^b, where 'b' is a declared integer */
    elseif exptp(e) and featurep(second(e), 'integer) then (
        operator_adjoint(first(e))^second(e))
     /* operator_adjoint(a^^b) = operator_adjoint(a)^^b, where 'b' is a declared integer */
    elseif ncexptp(e) and featurep(second(e), 'integer) then (
       operator_adjoint(first(e))^^second(e))    
    /* what did I forget? Not sure--return a operator_adjointp nounform for all others */
    else (simpfuncall('operator_adjoint, e)))$

simplifying('operator_adjoint,'simp_op_adjoint)$

/* For an operator in dot form, return a simplified version of e. The operator
   e is applied to a gensym, that is converted to a functional form and sent
   through the simplifier, and finally, the result is converted by to a dot form.

   To supress error messages involving the gensym variables, give 'f' the internal property.
*/   
operator_simp(e) := block([f : gensym(), dotdistrib : true],
   put(f,true,'internal),
   subst(f=1, dot_form(operator_apply(e,f))));

/* Return the commutator of the operators f & g; that is, return f.g - g.f. */
commutator(f,g) := operator_simp(f.g - g.f);

extended_operatorp(e) := block([infix : true],
  operatorp(e) or
  constantp(e) or
  (plusp(e) or nctimesp(e)) and every('extended_operatorp, args(e)) or
  ncexptp(e) and operatorp(first(e)) and featurep(second(e), 'integer) or
  timesp(e) and ((constantp(first(e)) and extended_operatorp(rest(e))) or
                 (operatorp(first(e)) and  constantp(rest(args(e))))));


/* Return the n-th order (n < 5) Baker-Campbell-Hausdorf expansion; thus, find the first few
   terms of a series expansion for 'z', where 'z' is a solution for exp(x)exp(y) = exp(z).
   I haven't attempted to extend this to n >= 5, but it's possible. 
   
   The first and second arguments to 'bch' must be operators. */

bch(x,y,n) := block([ans : 0],

  if not extended_operatorp(x) then (
     error("The first argument to 'bch' must be an operator; found ",x)),

  if not extended_operatorp(y) then (
     error("The second argument to 'bch' must be an operator; found ",y)),

  if n <= 0 or n >= 5 then (
     error("Only able to compute the order five or lower BCH formula; requested order ",n)),
  if n >= 1 then (
      ans : ans + x + y),  
   if n >= 2 then (
      ans : ans + commutator(x,y)/2),
   if n >= 3 then (
      ans : ans + (commutator(x,commutator(x,y)) + commutator(y, commutator(y,x)))/12),
   if n >= 4 then (
      ans : ans - commutator(y, commutator(x, commutator(x,y)))/24),
   ans);


  