/* Maxima code for working with operators, especially quantum mechanical operators.

   Barton Willis
   Professor of Mathematics
   University of Nebraska at Kearney

Copyright (c) Barton Willis, 2021
GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/

/* Eliminate some warnings from the translator. */
eval_when(translate,
          declare_translated(operator_formula,dot_form,operator_apply,
                             operator_express,operator_adjoint))$

load("simplifying");

/* Tell Maxima that 'operator' is a feature.*/
declare(operator, feature);

/* Utilities */

/* Return true iff the input is a declared operator or if the input has the form
   U[a,b,...], where U has been declared an operator. */

operatorp(e) := (mapatom(e) and featurep(e,'operator)) or (subvarp(e) and featurep(inpart(e,0) ,'operator));

plusp(e) := (not mapatom(e)) and inpart(e,0) = "+";
timesp(e) :=  (not mapatom(e)) and inpart(e,0) = "*";
nctimesp(e) := (not mapatom(e)) and inpart(e,0) = ".";
ncexptp(e) :=  (not mapatom(e)) and inpart(e,0) = "^^";

operator_formula(fn) :=
  if symbolp(fn) then (
    get(fn, 'formula))
  elseif subvarp(fn) then (
    apply(operator_formula(op(fn)), args(fn)))
  else false;

/* Convert an expression e from a functional form to a "dot" form; for example,
   if F & G are operators, then
   dot_form(F(G(x)) --> F . G . x and dot_form(107*F(G(x)) --> 107*F^^2 . x */

dot_form(e) := block([inflag : true],
  if plusp(e) or listp(e) then map('dot_form, e)
  elseif timesp(e) and constantp(first(e)) then first(e)*dot_form(rest(e))
  elseif not mapatom(e) and operatorp(inpart(e,0)) then inpart(e,0). dot_form(first(e))
  else e);

/* Convert from "dot" form to a functional form; for example, if Jx & Jy are
   operators, operator_apply(Jx.Jy, ψ) --> Jx(Jy(ψ)).*/ 
operator_apply(e,ψ) := block([opsubst : true,n, inflag : true,ee],

  if listp(e) then (
    map(lambda([s], operator_apply(s,ψ)),e))

   elseif subvarp(e) and not mapatom(e) and operatorp(inpart(e,0)) then (
      simpfunmake(e,[ψ]))

  elseif constantp(e) then (
    e*ψ)

  elseif operatorp(e) then (
    simpfunmake(e,[ψ]))

  elseif plusp(e) then (
     map(lambda([q], operator_apply(q,ψ)), e))

  /* constant * operator is OK, otherwise, error. */
  elseif timesp(e) then (
    if constantp(first(e)) then (
      operator_apply(first(e), operator_apply(rest(e),ψ)))
    else (     
      error("I don't know how to apply ", e, " to ", ψ)))

  elseif ncexptp(e) and plusp(first(e)) then (
     [e,n] : args(e),
     if integerp(n) and n > 0 then (
        if evenp(n) then (
           ee : operator_simp(e^^(n/2)),
           ee : operator_apply(ee, operator_apply(ee, ψ)))
        else (
            ee : operator_simp(e^^((n+1)/2)),
            operator_apply(operator_simp(e^^((n-1)/2)),operator_apply(ee, ψ))))
      else error("I don't know how to apply ", e^^n, " to ", ψ)) 

  elseif ncexptp(e) then (
    [e,n] : args(e),
    if integerp(n) and n > 0 then (
      operator_apply(e, operator_apply(e^^(n-1), ψ)))
    else (
      error("I don't know how to apply ", e^^n, " to ", ψ)))

  elseif nctimesp(e) then (
      operator_apply(first(e), operator_apply(rest(e), ψ)))

  /* Catches, for example, F^n, F/G, ... */
  else (
        error("I don't know how to apply ", e, " to ", ψ)));

/* For an expression in dot form, apply the formulae for the operators to evaluate
   the expression e. Example

   (%i3)	ham : p.p/2 +  q^^2/2$
   (%i4)	operator_apply(ham ,exp(- x^2/(2*ħ)))$
   (%i5)	operator_express(%),factor;
   (%o5)	(ħ*%e^(-x^2/(2*ħ)))/2
*/
operator_express(e) := block([opsubst : true,fn],
   if mapatom(e) then e
   else (
      fn : inpart(e,0),
      if operatorp(fn) and get(fn,'formula) # false then (
        get(fn, 'formula)(operator_express(first(e))))
    else 
      map('operator_express, e)));

operator_adjoint(e) := block([estar, inflag : true],
  if operatorp(e) then (
      estar : get(e,'operator_adjoint),
      if estar = false then error("Unable to find adjoint of ",e) else estar)
  elseif constantp(e) then conjugate(e)
  elseif plusp(e) then map('operator_adjoint, e)
  elseif timesp(e) and constantp(first(e)) then (
    conjugate(first(e)) * operator_adjoint(rest(e)))
  elseif nctimesp(e) then map('operator_adjoint, reverse(e))
  elseif ncexptp(e) then operator_adjoint(first(e))^^second(e)
  else error("Unable to find adjoint of ",e));

/* For an operator in dot form, return a simplified version of e. The operator
   e is applied to a gensym, that is converted to a functional form and sent
   through the simplifier, and finally, the result is converted by to a dot form.
*/   
operator_simp(e) := block([f : gensym()],
   subst(f=1, dot_form(expand(operator_apply(e,f)))));

/* Return the commutator of the operators f & g; that is, return f.g - g.f. */
commutator(f,g) := operator_simp(f.g - g.f);