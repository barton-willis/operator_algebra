/* Maxima code for working with the operators.

   Barton Willis
   Professor of Mathematics
   University of Nebraska at Kearney

Copyright (c) Barton Willis, 2021
GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/

load(simplifying);

/*Tell Maxima that 'operator' is a feature.*/
declare(operator, feature);

/* Utilities */

operatorp(e) := (mapatom(e) and featurep(e,'operator)) or (subvarp(e) and featurep(inpart(e,0) ,'operator));

plusp(e) := (not mapatom(e)) and inpart(e,0) = "+";
timesp(e) :=  (not mapatom(e)) and inpart(e,0) = "*";
nctimesp(e) := (not mapatom(e)) and inpart(e,0) = ".";
ncexptp(e) :=  (not mapatom(e)) and inpart(e,0) = "^^";

/* Convert an expression e from functional form to a "dot" form; for example,
   if F & G are operators, then
   dot_form(F(G(x)) --> F . G . x and dot_form(107*F(G(x)) --> 107*F^^2 . x */

dot_form(e) := block([inflag : true],
  if plusp(e) then map('dot_form, e)
  elseif timesp(e) and constantp(first(e)) then first(e)*dot_form(rest(e))
  elseif not mapatom(e) and operatorp(inpart(e,0)) then inpart(e,0). dot_form(first(e))
  else e);

/* Convert from "dot" form to a functional form; for example, if Jx & Jy are
   operators, operator_apply(Jx.Jy, ψ) --> Jx(Jy(ψ)).*/
   
operator_apply(e,ψ) := block([opsubst : true,n, inflag : true],
  if constantp(e) then (
    e*ψ)

  elseif operatorp(e) then (
    apply(e,[ψ]))

  elseif plusp(e) then (
    map(lambda([q], operator_apply(q,ψ)), e))

  /* constant * operator is OK, otherwise, error. */
  elseif timesp(e) then (
    if constantp(first(e)) then (
      operator_apply(first(e), operator_apply(rest(e),ψ)))
    else (     
      error("I don't know how to apply ", e, " to ", ψ)))

  elseif ncexptp(e) then (
    [e,n] : args(e),
    if integerp(n) and n > 0 then (
      operator_apply(e, operator_apply(e^^(n-1), ψ)))
    else (
      error("I don't know how to apply ", e^^n, " to ", ψ)))

  elseif nctimesp(e) then (
    operator_apply(first(e), operator_apply(rest(e), ψ)))

  /* Catches, for example, F^n, F/G, ... */
  else (
      error("I don't know how to apply ", e, " to ", ψ)));

operator_express(e) := block([opsubst : true,fn],
   if mapatom(e) then e
   else (
      fn : inpart(e,0),
      if operatorp(fn) and get(fn,'formula) # false then (
        get(fn, 'formula)(operator_express(first(e))))
    else 
      map('operator_express, e)));

operator_adjoint(e) :=
  if operatorp(e) then get(e,'operator_adjoint)
  elseif (numberp(e) or e=%i) then conjugate(e)
  elseif plusp(e) then map('operator_adjoint, e)
  elseif nctimesp(e) then map('operator_adjoint, reverse(e))
  elseif ncexptp(e) then operator_adjoint(first(e))^^second(e)
  else error("Unable to find adjoint of ",e);