(load('operator_algebra),0);
0$

(declare([F,G,H], operator),0);
0$

map('operatorp,[F,G,H]);
[true,true,true]$

map('operatorp,[f,Y,I]);
[false,false,false]$

map('operatorp,[F[x],G[%pi],H[6,28]]);
[true,true,true]$

operator_apply(0,x);
0$

operator_apply(1,x);
x$

operator_apply(107,x);
107*x$

operator_apply(107,-x);
-107*x$

operator_apply(F,x);
F(x)$

operator_apply(42*F,x);
42*F(x)$

operator_apply(-F,x);
-F(x)$

operator_apply(%pi*F,x);
%pi*F(x)$

operator_apply(-%pi*F,x);
-%pi*F(x)$

operator_apply(-%pi*F,-x);
-%pi*F(-x)$

operator_apply(-2*sqrt(3)*F,-x);
-2*sqrt(3)*F(-x)$

(declare([a,b],constant),0);
0$

operator_apply(a*F,x);
a*F(x)$

operator_apply(F/sqrt(5), X);
F(X)/sqrt(5)$

operator_apply(a*b*F,x);
a*b*F(x)$

operator_apply(F+G,x);
F(x)+G(x)$

operator_apply(F-G,x);
F(x)-G(x)$

operator_apply(F+G,x+y);
F(x+y)+G(x+y)$

operator_apply(a*F+b*G,x);
a*F(x)+b*G(x)$

operator_apply(a*(F-G),x);
a*(F(x) - G(x))$

(declare([F,G], linear),0);
0$

operator_apply(F.(F-G),x);
F(F(x)) - F(G(x))$

operator_apply(F.(F-a*G),x);
F(F(x)) - a*F(G(x))$

(remove([F,G], linear),0);
0$

errcatch(operator_apply(F*G,x));
[]$

errcatch(operator_apply(F^2,x));
[]$

errcatch(operator_apply(F/G,x));
[]$

operator_apply(F.G,x);
F(G(x))$

operator_apply(G.F,x);
G(F(x))$

operator_apply(F.F,x);
F(F(x))$

operator_apply(F.G - G.F,x);
F(G(x)) - G(F(x))$

operator_apply(F.G.F,x);
F(G(F(x)))$

operator_apply(F^^3,x);
F(F(F(x)))$

operator_apply(F^^(3/2),x);
(F^^(3/2))(x)$

operator_apply(F^^a,x);
(F^^(a))(x)$

dot_form(F(x));
F.x$

dot_form(107*F(x));
107*F.x$

dot_form(107*F(x)/46);
107*F.x / 46$

dot_form(F(%pi));
F.%pi$

dot_form(F(-x));
F.-x$

dot_form(F(aa-bb));
F . (aa-bb)$

dot_form(F(F(x)));
F^^2 . x$

dot_form(F(G(x)));
F.G.x$

dot_form(F(G(x)) - G(F(x)));
F.G.x - G.F.x$

dot_form(F(G(x)) + G(F(x)));
F.G.x + G.F.x$

dot_form(23*F(G(x)) + 42*G(F(x)));
23*F.G.x + 42*G.F.x$

dot_form(23*F(G(x)) + 42*G(F(x)));
23*F.G.x + 42*G.F.x$

dot_form(F(G(F(G(x)))));
(F.G)^^2 . x$

/* subscripted operators */

xx : operator_apply(F[%pi], x);
F[%pi](x)$

dot_form(xx);
F[%pi] . x$

xx : operator_apply(F[%pi,5], x);
F[%pi,5](x)$

dot_form(xx);
F[%pi,5] . x$

xx : operator_apply(F[%pi,5], x);
F[%pi,5](x)$

dot_form(xx);
F[%pi,5] . x$

(declare(σ,operator),0);
0$

xx : operator_apply(σ[x], x);
σ[x](x)$

dot_form(xx);
σ[x] . x$

xx : operator_apply(σ[x].σ[y], X);
σ[x](σ[y](X))$

dot_form(xx);
σ[x].σ[y] . X$

xx : operator_apply(σ[x].σ[y] - σ[y].σ[x], X);
σ[x](σ[y](X)) - σ[y](σ[x](X))$

dot_form(xx);
σ[x].σ[y] . X  - σ[y].σ[x] . X$

(remvalue(xx), declare(W, operator), declare(W, linear), 0);
0$

operator_apply([W, W.W, W^^4], 107);
[W(107), W(W(107)), W(W(W(W(107))))]$

operator_apply([W, W.W], a-b);
[W(a)-W(b), W(W(a)) - W(W(b))]$

(declare(Wc, operator), declare(Wc, linear),0);
0$

(put(W,Wc, 'operator_adjoint), put(Wc, W, 'operator_adjoint),0);
0$

operator_adjoint(%pi);
%pi$

operator_adjoint(%i);
-%i$

operator_adjoint(%i*%pi);
-%i * %pi$

operator_adjoint(W);
Wc$

operator_adjoint(Wc);
W$

operator_adjoint(W+Wc);
W+Wc$

operator_adjoint(W-Wc);
Wc-W$

operator_adjoint(W-Wc);
Wc-W$

operator_adjoint(W.Wc);
W.Wc$

operator_adjoint(W + %i*Wc);
Wc - %i*W$

operator_adjoint(5*W + 7*Wc);
5*Wc + 7*W$

operator_adjoint(W^^4);
Wc^^4$

operator_adjoint(23*W^^4);
23*Wc^^4$

operator_adjoint(operator_adjoint(F));
F$

(declare(F,operator, G, operator),0);
0$

(M :  matrix([0,F],[G,0]), 0);
0$

M : operator_adjoint(M);
matrix([0,operator_adjoint(G)],[operator_adjoint(F),0])$

operator_adjoint(M);
matrix([0,F],[G,0])$

/*  operator_adjoint of some constant multiples of operators #1  */

(declare(f,operator), operator_adjoint(f/sqrt(2)));
operator_adjoint(f)/sqrt(2)$

(forget(f,operator),0);
0$

(remvalue(M),0);
0$

(declare([f,g,h],operator), declare([a,b,c], constant), declare(n,integer), 0);
0$

 extended_operatorp(f);
 true$

 extended_operatorp(f.g);
 true$

extended_operatorp(f.g.h);
true$

extended_operatorp(f.g + g.f);
true$

extended_operatorp(f^^2);
true$

extended_operatorp(f^^n);
true$

extended_operatorp(42*f^^n / sqrt(2));
true$

extended_operatorp(a*f^^n / sqrt(2) - h);
true$

extended_operatorp(a*b*f.g + c*h);
true$

extended_operatorp(f*g);
false$

extended_operatorp(f^a);
false$

extended_operatorp(cos(f));
false$

values;
[]$

contexts;
[initial,global]$




