/* Maxima code for working with pauli matrices

   Barton Willis
   Professor of Mathematics
   University of Nebraska at Kearney

Copyright (c) Barton Willis, 2022
GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007
*/

declare([σx,σy,σz],linear, [σx,σy,σz], operator);

put(σx, lambda([q], σx.q), 'formula);
put(σy, lambda([q], σy.q), 'formula);
put(σz, lambda([q], σz.q), 'formula);

σx_p(e) := block([inflag : true], not mapatom(e) and inpart(e,0) = 'σx);
σy_p(e) := block([inflag : true], not mapatom(e) and inpart(e,0) = 'σy);
σz_p(e) := block([inflag : true], not mapatom(e) and inpart(e,0) = 'σz);

/* Implement the rules 
     σx^2 --> I, 
     σx σy --> σy σx - 2 %i σz,
     σx σz --> σz σx - 2 %i σy. */
simp_σx(e) := block([inflag : true],
  if σx_p(e) then first(e)
  elseif σy_p(e) then σy(σx(first(e))) - 2*%i*σz(first(e))
  else simpfuncall('σx,e));
simplifying('σx, 'simp_σx);

/* Implement the rules 
   σy^2 --> I,
   σy σz --> σz σy - 2*%i σx. */
 simp_σy(e) := block([inflag : true],
    if σy_p(e) then first(e)    
    elseif σz_p(e) then σz(σy(first(e))) - 2*%i*σx(first(e))
    else simpfuncall('σy,e));
simplifying('σy, 'simp_σy);

/* Implement the rule
    σz σz --> 1 */
 simp_σz(e) := block([inflag : true],
    if σz_p(e) then first(e)    
    else simpfuncall('σz,e));
simplifying('σz, 'simp_σz);
